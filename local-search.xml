<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>密码学基础</title>
    <link href="/2023/02/03/crypto/"/>
    <url>/2023/02/03/crypto/</url>
    
    <content type="html"><![CDATA[<h2 id="古典加密算法"><a href="#古典加密算法" class="headerlink" title="古典加密算法"></a>古典加密算法</h2><p>Vigenere算法：</p><p>首先我们有一组密钥：K，对明文M进行加密，得到密文C。</p><p>在密钥当中，a表示凯撒前移0位，b表示1位。。。z表示25位。然后对M的对应字符加密。加密完，K用下一个字母，对M的下一个字母加密。可以表示为：</p><p>$$<br>C_i&#x3D;M_i+K_{i\ mod\ L} \ mod\ 26<br>$$</p><p>$$<br>M_i&#x3D;C_i-K_{i\ mod\ L}\ mod\ 26<br>$$</p><img src="/2023/02/03/crypto/1669230285437.png" class="" width="1669230285437"><p>Playfair加密算法：</p><p>选取一个密钥，将其去重。如cryptog<del>r</del>a<del>p</del>h<del>y</del> -&gt; cryptogah。然后从左到右、从上到下填入5x5的矩阵（注意，i&#x2F;j视为同一个字母）。剩下的部分则a-z顺序填写。得到密钥矩阵。</p><p>接下来把明文两两一组切分。如love -&gt; lo ve。如果有相邻且相同的字符，中间插入x。如killers -&gt; ki lx le rs。如果最后还有落单的字符，配上x。如tom -&gt; to mx。</p><p>最后进行加密：对于一组内的两个字符：</p><ul><li>如果在矩阵的同一行，各自变成各自右边字符</li><li>如果在同一列，各自变成下面的字符</li><li>否则，变成对角线的字符。x a | b y -&gt; (x, y) -&gt; (a, b)</li></ul><p>解密则是把右下变成左上。</p><h2 id="现代加密算法"><a href="#现代加密算法" class="headerlink" title="现代加密算法"></a>现代加密算法</h2><ul><li>DES算法：</li></ul><p>$$<br>L_i&#x3D;R_{i-1}<br>$$</p><p>$$<br>R_i&#x3D;L_{i-1}\oplus F(R_{i-1},k_i)<br>$$</p><p>总共有16轮加密。</p><ul><li>CBC加密算法：</li></ul><p>$$<br>C_N&#x3D;E_K(C_{N-1}\oplus P_N), C_0&#x3D;IV<br>$$</p><p>$$<br>P_N&#x3D;D_K(C_N)\oplus C_{N-1},C_0&#x3D;IV<br>$$</p><ul><li>流密码加密：</li></ul><p>把密钥流与明文数据异或。</p><ul><li>线性反馈移位寄存器LFSR：</li></ul><p>对于一个特征多项式，$f(x)&#x3D;1+c_1x+c_2x^2+c_3x^3+…$ 其中, x^n表示离结果寄存器距离为n的寄存器，c_n表示是否参与异或操作。如 $f(x)&#x3D;1+x^2+x^4$</p><img src="/2023/02/03/crypto/1669304375453.png" class="" width="1669304375453"><p>递归关系为：$a_n&#x3D;a_{n-2}\oplus a_{n-4}$，表示a_n受到距离为2，4两个寄存器a_{n-2}, a_{n-4}的影响。</p><ul><li><p>Diffie-Hellman算法</p><ul><li>Alice和Bob各自保有a, b。双方都已知p, g</li></ul><ul><li>Alice生成 $A&#x3D;g^a\ mod\ p$，将A, p, g发给Bob</li><li>Bob生成 $B&#x3D;g^b\ mod\ p$，同时计算得到 $K&#x3D;A^b&#x3D;g^{ab}\ mod\ p$。将B发回给Alice</li><li>Alice计算 $K&#x3D;B^a&#x3D;g^{ab}\ mod\ p$</li><li>这样，双方共有p, g, K。各自保有a, b。</li></ul></li></ul><h2 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h2><ol><li>扩展的欧式算法，求乘法逆元。</li></ol><img src="/2023/02/03/crypto/1669278985952.png" class="" width="1669278985952"><ol start="2"><li>普通欧式算法：求最大公约数</li></ol><p>$$<br>\gcd(a,b) &#x3D; \gcd(b, a\ mod\ b)<br>$$</p><ol start="3"><li>中国剩余定理：解同余方程。</li></ol><p>对于</p><p>$$<br>x\equiv b_i\ mod\ m_i<br>$$</p><p>求取$ m&#x3D;\Pi m_i, M_i&#x3D;m&#x2F;m_i, M’_i&#x3D;M^{-1}_i\ mod\ m_i, sum &#x3D; \sum M_iM’_ib_i$</p><p>则$x&#x3D;sum\ mod\ m.$</p><ol start="4"><li>费马小定理</li></ol><p>$a^{p-1}&#x3D;1\ mod \ p$</p><ol start="5"><li>欧拉定理</li></ol><p>欧拉函数：$\varphi(n)$是从[1, n)与n互质的数的数量。显然 $\varphi(p) &#x3D; p-1.$</p><p>定理内容：$a^{\varphi(n)} &#x3D; 1\ mod\ n$.</p><p>可以看到，费马小定理是欧拉定理的一种特殊的情况。</p><p>上面两个定理结合模运算的性质，可以解决一些数论问题。</p><ol start="6"><li>本原根</li></ol><p>例如2是29的一个本原根，这意味着 $2^1, 2^2, …, 2^{28}$可以取遍1~28的所有数。也意味着所有数y都可以写成 $y&#x3D;2^x$。</p><p>离散对数： $x&#x3D;dlog_{2,29}y$</p>]]></content>
    
    
    <categories>
      
      <category>courses</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OOP &amp; Java</title>
    <link href="/2023/02/03/oop/"/>
    <url>/2023/02/03/oop/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象的软件设计-amp-Java语言程序设计"><a href="#面向对象的软件设计-amp-Java语言程序设计" class="headerlink" title="面向对象的软件设计 &amp; Java语言程序设计"></a>面向对象的软件设计 &amp; Java语言程序设计</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="软件构造基本流程与目标666"><a href="#软件构造基本流程与目标666" class="headerlink" title="软件构造基本流程与目标666"></a>软件构造基本流程与目标666</h3><p> 软件的构成：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">软件 &#x3D; 程序 + 数据 + 文档<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>程序：计算机可以接受的一系列指令，可以实现所要求的功能。</li><li>数据：使得程序能够适当操作信息的数据结构。</li><li>文档：描述程序的研制过程、方法、使用的图文资料。</li></ul><p>软件开发的生命周期：</p><ol><li>计划</li><li>分析</li><li>设计</li><li>实现</li><li>测试与集成</li><li>维护</li></ol><p>软件开发过程模型</p><ul><li><p>两种基本模型</p><ul><li>线性模型</li><li>迭代过程</li></ul></li><li><p>传统软件开发过程模型</p><ul><li><em>瀑布过程</em></li><li>增量过程</li><li>原型过程</li></ul></li><li><p>流行的软件开发过程模型</p><ul><li>敏捷开发</li><li><em>测试驱动开发</em></li></ul><p>其中，瀑布和增量是线性的，其余是迭代的。</p><blockquote><p>EG1. 瀑布模型</p></blockquote><p>瀑布模型是最典型的预见性开发方法，严格遵循预先计划的需求分析、设计、编码、集成、测试、维护的步骤顺序执行。<br><img src="/image/oop/1654444258442.png" alt="1654444258442.png"></p><p>特点：</p><ul><li>线性推进</li><li>阶段划分清楚</li><li>整体推进</li><li>无迭代</li><li>管理简单</li><li><em>无法适应需求变化</em>（disadv.)</li></ul><blockquote><p>EG2. 测试驱动开发&#x2F;TDD</p></blockquote><p>测试驱动开发要求先编写测试代码，再编写对应的功能的代码，通过测试来推动整个开发的进行。<br><strong>这有助于编写简洁可用、高质量的代码，并加速开发过程。</strong></p><p><em>基本过程：</em> （红灯-绿灯-重构）</p><ul><li>明确功能需求，制定TODO testing list</li><li>完成针对此功能需求的测试用例编写</li><li>测试代码编译不通过（RED)</li><li>编写对应的功能代码</li><li>测试通过（GREEN）</li><li>重构代码，保证测试通过(REFACTOR)</li><li>循环完成所有功能的开发</li></ul><p>优势：太多了，我觉得不是重点。参考粗字编。</p></li></ul><p>软件构造的目标：</p><ul><li>可理解性</li><li>可维护性</li><li>可复用性</li><li>时空性能</li></ul><h3 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h3><p>How do we understand OOP?</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">一切都是对象、方法的封装。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>面向对象思想模拟客观世界的事物与事物之间的联系为前提。</p><p>面向对象基本思想：</p><ul><li>任何事物都是对象，对象具有属性和方法。复杂的对象由简单的对象以某种方式构成。</li><li>对象之间是普遍联系的，通过类比发现对象之间的相似性与共同属性，这是构成对象类的依据。</li><li>对象的相互联系通过“消息”进行。消息驱动对象执行一系列操作，从而完成任务。</li></ul><p>面向对象的优势：</p><ul><li>模块化</li><li>自然性</li><li>并发性</li><li>重用性<br>面向对向方法使得软件具有良好的体系结构，便于软件构件化、复用；使得软件具有良好的扩展性和维护性，抽象程度高，因此具有较高的生产效率。</li></ul><p>面向对象的三大特性(ape &#x2F;eip&#x2F;)：</p><ul><li>封装 Encapsulation</li><li>继承 Inheritance</li><li>多态 Polymorphism ——上课，不同学院的学生有不同的上课方式</li></ul><h2 id="Basic-Java-Language"><a href="#Basic-Java-Language" class="headerlink" title="Basic Java Language"></a>Basic Java Language</h2><h3 id="Java-Signs"><a href="#Java-Signs" class="headerlink" title="Java Signs"></a>Java Signs</h3><p>标识符：由英文字母、数字、下划线、美元符号$组合而成。不能以数字打头。</p><p>关键字：没啥好考的。注意标识符不能与关键字同名。</p><p>注释符：</p><ul><li>行注释：&#x2F;&#x2F;abc</li><li>块注释：&#x2F;* abc *&#x2F;</li><li>文档注释： &#x2F;** abc **&#x2F;</li></ul><h3 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h3><p>数据类型分类：</p><ul><li>基本数据类型<ul><li>数值型<ul><li>整数类型(byte 8b, short 16, int 32, long 64)</li><li>浮点类型(float 32, double 64)</li></ul></li><li>字符型(char 16)</li><li>布尔型(boolean 1)</li></ul></li><li>引用数据类型<ul><li>类</li><li>接口</li><li>数组</li></ul></li></ul><p>整数类型：</p><ul><li>各个整数类型的范围和字段长度固定，不受具体操作系统影响。—&gt; 保证可移植性</li><li>整型常量默认是int，声明long型常量时要加l&#x2F;L。eg. 16L</li></ul><p>浮点类型：</p><ul><li>各个浮点类型的范围和字段长度固定，不受具体操作系统影响。—&gt; 保证可移植性</li><li>常量默认是double，声明float需要加f&#x2F;F。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token comment">// ILLEGAL</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.14f</span> <span class="token comment">// CORRECT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>数据类型的转换：</p><ul><li>整数和浮点数据类型按照精度有如下高低顺序：(H) double &gt; float &gt; long &gt; int &gt; short &gt; byte （L)。</li><li>低–&gt;高，自动转换。如 float  f &#x3D; 200。</li><li>高–&gt;低，需要手动强转。如 int i &#x3D; (int) 300.5f。</li><li>任何的转换过程都有可能造成精度丢失。甚至可能造成较大的误差（溢出）</li></ul><p>常量：</p><ul><li>直接常量</li><li>符号常量：必须有final关键字。</li></ul><p>数组</p><ul><li><p>声明数组</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span> <span class="token comment">// Java语言规范提倡</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// C语言风格，acceptable</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></li><li><p>创建数组</p><ul><li><p>一维数组</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//指定长度</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token comment">//在创建的同时赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>二维数组</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//逐行赋值</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//不同行的列数可以不同</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul></li><li><p>访问数组：范围在0 ~ length - 1，越界会抛出异常。</p></li></ul><h3 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h3><p>条件、循环、跳转语句。</p><p>和C语言不能说一模一样只能说完全相同。</p><h3 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h3><p>标准输入 System.in 是一个InputStream(字节输入流)类的<strong>对象</strong>，通常不直接使用它来读取用户键盘的输入，而是采取两种常用的封装方式：</p><ol><li><p>使用字符流封装</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedReader</span> stdin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>stdin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></li><li><p>使用Scanner类进行封装</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> stdin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>stdin<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></li></ol><p>标准输出 System.out 是一个PrintStream类的对象，可以直接使用其中的方法 print(), println(), write()等来在控制台输出。</p><ul><li>print()和println()参数一样，区别在于println换行。</li><li>write()用来输出字节数组，不换行。</li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常指不期而至的状况。Exception继承于Throwable类。</p><p><img src="/image/oop/1654466995974.png" alt="1654466995974.png"></p><p>异常关键字：</p><ul><li>try - 用于监听。try语句块内发生异常时，异常才会被抛出。</li><li>catch - 用于捕获try语句块抛出的异常。</li><li>finally - 此语句块总会执行。用于回收try块内打开的物力资源 。只有finally块执行完成后才会回来执行try或者catch块当中的return或throw语句。如果finally块当中使用了return&#x2F;throw等终止方法的语句，则不会跳回，直接停止。</li><li>throws - 用于<strong>方法签名</strong>当中，声明该方法可能抛出的异常。</li><li>throw - 用于抛出异常。</li></ul><p>throw和throws：</p><ul><li>共同点：只抛出异常，不处理，消极的。</li><li>不同点：throw用于方法内抛出<strong>对象</strong>，并且抛一个；throws用于方法头，表示异常的声明，可以一次抛出多个。</li></ul><p>try-catch和throw(s)：try-catch可以抛出并处理异常，而throws(s)不会处理，只交由函数的上层调用处理。</p><p>try-catch，try-finally， try-catch-finally are all acceptable patterns of handling exceptions.</p><h3 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h3><p>虚拟机指通过软件<strong>模拟</strong>的具有完整硬件系统的，运行在一个完全隔离环境中的计算机系统。</p><p>Java虚拟机(aka. JVM) 通过软件来模拟Java字节码的指令集，是Java程序的运行环境。</p><p>JVM不仅仅支持Java语言，Groovy，Kotlin等都可以转换成字节码文件，通过JVM进行运行和处理。</p><p>JVM体系结构主要包括两个子系统、两个组件：</p><ul><li>类装载器子系统 Class Loader</li><li>执行引擎子系统 Execution Engine</li><li>运行时数据区组件 Runtime Data Area</li><li>本地接口组件 Native Interface</li></ul><p><img src="/image/oop/1654468463380.png" alt="1654468463380.png"></p><p>Java堆在逻辑上被分成三个区域：</p><ul><li>新生代</li><li>老年代</li><li>元空间</li></ul><p><img src="/image/oop/1654468584272.png" alt="1654468584272.png"></p><p>JVM垃圾回收：</p><ul><li>C和C++使用显式分配器，将堆空间完全暴露给用户。<ul><li>优点：程序员可以很好地利用堆空间内存</li><li>缺点：每次分配需要手动释放，否则容易引起内存泄露。</li></ul></li><li>Java使用隐式分配器，回收交给<strong>垃圾回收器</strong>。<ul><li>垃圾回收器位于执行引擎</li><li>主要对象是JVM堆空间</li><li>任务：<ul><li>跟踪每个对象，一旦处于不可达状态，回收其占用的内存</li><li>清理内存分配，回收产生的内存碎片。</li></ul></li><li>优点：<ol><li>屏蔽内存管理的细节，提高开发效率</li><li>开发者无权操纵内存，减少内存泄漏的风险。</li></ol></li><li>缺点：<ul><li>不受开发者控制，不受控的垃圾回收会带来多余的时间开销。</li></ul></li></ul></li></ul><p>JVM、JRE、JDK的区别：</p><ul><li>所有Java运行在JVM上。</li><li>JRE &#x3D; JVM + Java基础API</li><li>JDK &#x3D; JRE + 开发环境（javac编译工具、jar打包程序等）</li></ul><p><img src="/image/oop/1654469056674.png" alt="1654469056674.png"></p><h2 id="类和对象（封装）"><a href="#类和对象（封装）" class="headerlink" title="类和对象（封装）"></a>类和对象（封装）</h2><h3 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h3><p>面向对象三大特性：</p><ul><li>封装 Encapsulation</li><li>继承 Inheretance</li><li>多态 Polymorphism</li></ul><p>面向过程与面向对象比较：</p><ul><li>面向过程<ul><li>优点：简单场景下快速开发，计算效率高</li><li>缺点：灵活性差，无法适用复杂情况</li><li>适用于：简单场景、高性能计算</li></ul></li><li>面向对象：<ul><li>优点：低耦合、易复用、易扩展</li><li>缺点：性能比较低</li><li>适用于：复杂的大型软件</li></ul></li></ul><h3 id="类的声明与构造"><a href="#类的声明与构造" class="headerlink" title="类的声明与构造"></a>类的声明与构造</h3><p>this关键字：代表了对象本身。</p><p>继承：使用extends，并且在子类的构造方法当中可以使用super(para1, para2, …)来继承父类的构造方法。</p><p>修饰符：可以部分地修饰类、方法、变量</p><ul><li><p>非访问修饰符</p><ul><li>abstract 抽象（须继承）</li><li>final 最终（不可更改、不可继承）</li><li>static 静态，优先于对象出现</li></ul></li><li><p>访问修饰符</p><ul><li>public 公共类，可以被所有类访问</li><li>protected 保护类，可以被同包、子类访问</li><li>default(或缺省) 默认类，只能被同包访问</li><li>private 私有类，只能自我访问</li></ul></li></ul><p>类修饰符：</p><ul><li>static不可修饰类，其他6个可以。</li><li>一个类文件当中，最多只能有一个类修饰符参与构造的类。但是可以有多个缺省修饰的类。</li><li>可以看出来，在类中private、default、final是不能与abstract共存的。</li></ul><p>方法修饰符：</p><ul><li>所有修饰符都可以使用。</li><li>访问修饰符确定了此方法可以在什么样的类当中被访问。</li><li>abstract表示必须在子类当中Override此抽象方法</li><li>final表示方法不能被重写、覆盖、修改</li><li>static表示方法与类一同产生，优先对某个具体的对象。所以static方法是类所有的。由于static是最先产生的，他不能访问非static的方法或者属性。</li></ul><p>变量修饰符：</p><ul><li>abstract不能用，因为变量无法继承。</li><li>访问修饰符同上。</li><li>final表示变量不能被修改&#x2F;重新赋值</li><li>static表示变量比对象先产生，是类所有的。</li></ul><h2 id="接口与继承"><a href="#接口与继承" class="headerlink" title="接口与继承"></a>接口与继承</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承应当利用extends关键字。</p><p>子类不能直接继承父类的构造方法，需要使用super关键字。</p><p>子类能利用父类的属性和方法，并且增加一些新的属性与方法。</p><p>优缺点：</p><ul><li>优点：<ul><li>提高可复用性</li><li>提高可扩展性</li><li>使类与类产生关系，构成多态的基础</li></ul></li><li>缺点：增强了类的耦合性（一个类的改变会影响其他类）</li></ul><p>Recall: 面向对象的优势：低耦合、易复用、易扩展</p><h3 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h3><p>抽象类是不能实例化的的类。</p><p>抽象类当中有抽象方法，也有不抽象的方法（要有方法体）。</p><p>抽象方法只存在于抽象类。</p><p>接口比抽象类更抽象，接口当中的所有方法都是抽象方法，没有属性。</p><p>接口当中的抽象方法不需要使用public abstract关键字。</p><p>此外，接口必须是public的，才能让其他类实现。</p><p>有了抽象类，为什么还要接口？</p><ul><li>抽象类解决不了多继承的问题</li><li>要实现的方法不是当前类的必要方法</li><li>不同类型的多个类实现同样的方法</li></ul><p>接口也可以用extends！</p><h3 id="Java多继承"><a href="#Java多继承" class="headerlink" title="Java多继承"></a>Java多继承</h3><p>子类的继承只能有一个父类，为了避免多个父类发生属性与方法的冲突。要想实现多继承，有两种方法：</p><ul><li>内部类，在类的内部定义多个父类，引用之。</li><li>实现多个接口。</li></ul><h3 id="超类与super关键字"><a href="#超类与super关键字" class="headerlink" title="超类与super关键字"></a>超类与super关键字</h3><p>所有类都继承了Object类，可以使用Object类当中的方法。</p><p>Object类型的变量如果想要进行具体的操作，需要先进行强制转换。</p><p>Object类当中的equals()方法用于比较两个对象是否相等，原理是判断两个对象的引用是否指向同一个对象。</p><p>super关键字的功能：</p><ul><li>在子类的构造方法当中显式地调用父类构造方法，as mentioned prev.</li><li>访问父类的成员方法和变量，类似于this关键字。如super.maxHp &#x2F; super.setShootNum()</li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态的好处：</p><ul><li>减少耦合</li><li>增强可替换性</li><li>增加可扩展性</li><li>提高灵活性</li></ul><p>使用多态的三个必要条件：</p><ul><li>继承</li><li>重写</li><li>父类引用指向子类</li></ul><p>多态的三种实现方式：</p><ul><li>重写 Override</li><li>抽象类和抽象方法</li><li>接口</li></ul><h2 id="设计模式导论"><a href="#设计模式导论" class="headerlink" title="设计模式导论"></a>设计模式导论</h2><h3 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h3><ul><li><strong>单一职责原则</strong>：就一个类而言，应该仅有一个引起它变化的原因。——不要把变化原因各不相同的职责放在一起。</li><li><strong>开闭原则</strong>：一个软件实体应当对扩展开放，对修改关闭。即在设计一个模块的时候，应当尽量使这个模块可以在不被修改的前提下被扩展。</li><li><strong>里氏代换原则</strong>：如果一个软件实体使用了一个基类，那么也能够等效地使用它的子类。因为子类继承了父类。</li><li><strong>依赖倒转原理</strong>：高层模块不应该依赖低层模块，都应该依赖抽象。要针对接口编程，不要针对实现编程——应当尽量使用抽象类与接口，而不使用具体类。</li><li><strong>合成&#x2F;聚合复用原则</strong>：尽量使用对象组合，而不是继承来达到利用的目的。——在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分。</li><li><strong>接口隔离原则</strong>：客户端不应该依赖它不需要的接口——即使用分割后的尽量小的接口，确保每个接口都是完全有用的。</li><li><strong>迪米特法则</strong>：一个软件实体应当尽可能少地与其他实体发生相互作用。</li></ul><p>设计模式的分类：</p><ul><li>目的：<ul><li>创建型模式</li><li>结构型</li><li>行为型</li></ul></li><li>范围：<ul><li>类模式</li><li>对象模式</li></ul></li></ul><p><img src="/image/oop/1654479003495.png" alt="1654479003495.png"></p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>保证一个类有且只有一个实例，并且提供一个访问它的全局访问点。如一个系统只有一个时钟，飞机大战中只有一个英雄机。</p><p>实现思路：</p><ul><li>使用私有的静态变量来定义实例，将实例与整个类捆绑，并且不可被外界访问。</li><li>提供一个静态方法getInstance()，首次实例化对象，返回这个唯一的实例。</li><li>为了防止多个线程同时访问，调用getInstance()，可以在static后加上synchronized关键字。这保证了线程安全，但是效率低。</li></ul><p><img src="/image/oop/1654511914036.png" alt="1654511914036.png"></p><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>一个工厂生产很多种不同的pizza。显然如果我们要新增pizza种类，需要修改pizza工厂的代码，违反了开闭原则。</p><p><img src="/image/oop/1654481540720.png" alt="1654481540720.png"></p><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>一个工厂对应一种pizza，如果需要新增pizza，建立新种工厂与新种pizza类即可，无需修改现有的代码。</p><p><img src="/image/oop/1654481636031.png" alt="1654481636031.png"></p><h3 id="简单工厂模式vs工厂方法模式"><a href="#简单工厂模式vs工厂方法模式" class="headerlink" title="简单工厂模式vs工厂方法模式"></a>简单工厂模式vs工厂方法模式</h3><ul><li>简单工厂模式<ul><li>将创建对象的逻辑判断放在工厂类当中，客户不感知具体的类</li><li>违反了开闭原则，要增加新的产品，必须修改工厂。</li></ul></li><li>工厂方法模式<ul><li>将判断逻辑从工厂类转移到客户端，客户端必须感知到具体的工厂类</li><li>符合开闭原则，有新的产品只需创建对应的产品类和工厂类即可，无需修改已有的代码。</li></ul></li></ul><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>一个品牌搭配一个工厂生产不同各类的产品。</p><p>当只有一个品牌的时候就是简单工厂模式，当有两个以上品牌时，就是抽象工厂模式。</p><p>抽象工厂模式横向扩展很容易，即新增一个品牌（huawei, xiaomi + apple)很容易，新建apple工厂与apple产品即可。</p><p>但是纵向扩展很难，即新增一种产品（如手机，平板+电脑），需要修改所有的工厂。</p><p><img src="/image/oop/1654481958667.png" alt="1654481958667.png"></p><p>优点：</p><ul><li>一个产品族的多个对象被设计成一起工作时，能保证客户端始终只会使用同个产品族中的对象。</li></ul><p>缺点：</p><ul><li>产品族扩展非常困难，要新增一个产品类，既要修改工厂抽象类，还要修改具体的实现类。</li><li>增加了系统的抽象性与理解难度。</li></ul><h2 id="软件测试与代码质量保障"><a href="#软件测试与代码质量保障" class="headerlink" title="软件测试与代码质量保障"></a>软件测试与代码质量保障</h2><h3 id="软件测试的定义与分类"><a href="#软件测试的定义与分类" class="headerlink" title="软件测试的定义与分类"></a>软件测试的定义与分类</h3><p>软件测试以需求为中心，不以缺陷为中心。<br>软件测试的分类：</p><ul><li>单元测试——编码阶段，对象是单个模块or组件</li><li>集成测试——对应详细设计，对象是一组模块&#x2F;组件</li><li>系统测试——对概要设计，对象是整个系统</li><li>验收测试——需求阶段，对象是整个系统</li></ul><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>测试用例包括了：</p><ul><li>测试输入</li><li>执行条件</li><li>预期结果</li></ul><p>设计方法：</p><ul><li>黑盒测试（功能测试）：着眼程序外部结构，不考虑内部逻辑，主要针对<strong>软件界面与功能</strong></li><li>白盒测试（结构测试）：全面了解程序内部的逻辑结构，对所有逻辑路径进行测试。</li></ul><p>设计原则：</p><ul><li>正确性</li><li>全面性</li><li>连贯性</li><li>可判定性</li><li>可操作性</li></ul><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>针对程序的内部结构。<br>逻辑覆盖方法：（Weak to strong）</p><ul><li>语句覆盖：所有语句执行一次</li><li>判定覆盖：执行每个分支一次</li><li>条件覆盖：所有条件取true和false各一次</li><li>判定条件覆盖：判定+条件</li><li>条件组合覆盖：所有判定结点的所有可能的取值组合各自取一次</li><li>路径覆盖：每个路径至少执行一次</li></ul><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>检查程序能否适当地接受输入并产生正确的输出。<br>等价类：类内数据等价</p><ul><li>有效等价类：合理的、有意义的输入。用来考查程序能否完成指令的功能</li><li>无效等价类：不合理的、没有意义的输入。用来考查被测系统的容错性。</li></ul><h3 id="性能测试与压力测试"><a href="#性能测试与压力测试" class="headerlink" title="性能测试与压力测试"></a>性能测试与压力测试</h3><p>性能测试：检查系统是否满足要求的，为了保留系统的扩展空间而进行的，稍稍超过正常范围的测试。<br>压力测试：性能测试的一种。目的是测试在一定负载下系统长时间运行下的稳定性与性能。</p><h3 id="代码覆盖率测试"><a href="#代码覆盖率测试" class="headerlink" title="代码覆盖率测试"></a>代码覆盖率测试</h3><p>代码覆盖率 &#x3D; 代码的覆盖程序，一种度量方式。</p><ul><li>语句覆盖</li><li>判定</li><li>条件</li><li>路径</li></ul><h3 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h3><p>如何评价：</p><ul><li>可维护性</li><li>可读性</li><li>可扩展性</li><li>可复用性</li><li>可测试性</li><li>简洁性</li></ul><p>如何提高：</p><ol><li>遵循编码规范</li><li>编写高质量的单元测试</li><li>代码审查</li><li>开发未动，文档先行</li><li>持续重构</li></ol><h2 id="集合与策略、迭代器模式"><a href="#集合与策略、迭代器模式" class="headerlink" title="集合与策略、迭代器模式"></a>集合与策略、迭代器模式</h2><h3 id="集合类概述"><a href="#集合类概述" class="headerlink" title="集合类概述"></a>集合类概述</h3><p>集合又被称为容器，与数组相似，但是不同的是：</p><ol><li>数组长度固定，而集合长度可变</li><li>数据存放基本类型的数据，集合存放对象的引用<br>常见的集合：List集合、Set集合、Map集合等。其中List和Set实现了Collection接口。</li></ol><p>集合的继承框架见下。</p><p><img src="/image/oop/1654505162411.png" alt="1654505162411.png"></p><p>集合框架的内容：</p><ul><li>接口：代表集合的抽象数据类型。如Collection, List, Set, Map</li><li>实现：是集合接口的具体实现。如ArrayList, LinkedList, HashSet, HashMap</li><li>算法：实现的对象的方法执行的一些有用的计算。如搜索、排序等。这些算法被 称为多态，因为相同的方法在相似的接口上有不同的实现。</li></ul><p>LinkedList vs ArrayList</p><ul><li>LinkedList在增加和删除的操作效率更高</li><li>ArrayList在查找和修改的操作效率更高</li></ul><p>LL和AL可以序列化吗？可以，它们都实现了Serializable接口。</p><p>HashSet不是线程安全的，所以在多线程访问时要显式同步对HashSet的并发访问。</p><p>HashMap是一个散列表，存储的是键值对（key-value)映射。</p><ul><li>添加：this.put(key, value)</li><li>访问：this.get(key)</li><li>删除：remove(key)</li></ul><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>定义一系列算法，将每个算法封装，使得它们可以相互替换。但是什么情况下用什么策略由Client决定。</p><p>涉及角色：</p><ul><li>Context 负责执行策略。如英雄机</li><li>Abs strategy 抽象策略类，如射击</li><li>Concrete strategy 具体的策略类，如散射</li><li>Client 客户端，如游戏本体</li></ul><p><img src="/image/oop/1654511999977.png" alt="1654511999977.png"></p><p>策略模式的重心不是实现算法，而是如何组织、调用算法。</p><p>优点：</p><ul><li>代码可复用性</li><li>可扩展性</li><li>高内聚、低耦合</li></ul><p>缺点：</p><ul><li>只适用于客户端了解所有算法的情况（由客户端决定）</li><li>如果策略数量较多的话，对象的数目会很可观</li></ul><p><img src="/image/oop/1654511958203.png" alt="1654511958203.png"></p><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>将遍历的过程交由迭代器实现，使之与聚合对象分离。</p><p><img src="/image/oop/1654512611947.png" alt="1654512611947.png"></p><p>例子：</p><p><img src="/image/oop/1654512651237.png" alt="1654512651237.png"></p><p><img src="/image/oop/1654512684831.png" alt="1654512684831.png"></p><h2 id="流与输入输出"><a href="#流与输入输出" class="headerlink" title="流与输入输出"></a>流与输入输出</h2><h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3><p>流是一组有序的数据序列，将数据从一个地方带到另一个地方。</p><p>流的分类：</p><ul><li>方向：输入6与输出6</li><li>数据单位：字节6（传二进制代码Byte）与字符6（传字符）</li><li>功能：节点6与处理6</li></ul><h3 id="输入与输出流"><a href="#输入与输出流" class="headerlink" title="输入与输出流"></a>输入与输出流</h3><p>从控制台读取字符串：BufferedReader +InputStreamReader + Sys.in(输入流)</p><p>从文件读取：ISR + FileInputStream （如果不使用BR，this.read()只读一个字符)</p><p>写到文件：OutputSWriter + FileOutputStream</p><h3 id="流的继承"><a href="#流的继承" class="headerlink" title="流的继承"></a>流的继承</h3><p>抽象流类型：四大家族</p><table><thead><tr><th></th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputS</td><td>Reader</td></tr><tr><td>输出流</td><td>OS</td><td>Writer</td></tr></tbody></table><p>以Stream结尾的是字节6，以R&#x2F;W结尾的是字符6。</p><p>所有的流都实现了java.io.Closeable接口。</p><p>两种6是可以互相转换的。字节6 $\leftrightarrow$ 字符6。</p><h3 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h3><p>读文件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> cont <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//charset is by default UTF-8.</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lines <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAlllines</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以上三个都是Files当中的静态方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>写文件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> content<span class="token punctuation">,</span> charset<span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> content<span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> lines<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>创建文件和目录：</p><p>文件和目录都以File对象的形式存在。</p><ul><li>创建新目录：<code>Files.createDirectory(path)</code> 其中路径除了最后一个部件之外其他必须是存在的</li><li>创建路径中的中间目录：<code>Files.createDirectories(path)</code></li><li>创建一个空文件：<code>Files.createFile(path)</code> 如果文件已经存在，会异常</li></ul><p>复制、移动、删除文件：</p><ul><li>复制：<code>Files.copy(fromP, toP)</code></li><li>移动：<code>Files.move(fromP, toP)</code>（如果toP存在，那么复制或者移动会失败。可以通过在函数当中添加option，如REPLACE_EXISTING）</li><li>删除文件：<code>Files.delete(Path)</code> with possible excep. or <code>boolean deleted = Files.deleteIfExists(path)</code></li></ul><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><p>序列化：把对象变成对象输出流ObjectOutputStream</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OOS</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FOS</span><span class="token punctuation">(</span><span class="token string">"person.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把对象person1写到person.dat</span>oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 此处还需要捕获异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>反序列化：把对象输入流ObjectInputStream变成对象</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OIS</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FIS</span><span class="token punctuation">(</span><span class="token string">"person.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> zhangsan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//还需要try-catch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="数据访问对象模式"><a href="#数据访问对象模式" class="headerlink" title="数据访问对象模式"></a>数据访问对象模式</h3><p>即形成一个类似于数据管理系统的模式。</p><p>需要的角色：</p><ol><li>数值对象，如学生Student</li><li>数据访问对象接口，如学生管理系统的接口，定义了搜索、排序等多个数据操作方法</li><li>接口的实现（实体类），实体类当中除了实现数据操作方法之外，数值对象也存储在实体类当中。</li></ol><p><img src="/image/oop/1654522914576.png" alt="1654522914576.png"></p><p>优点：隔离数据层，不会影响到实体对象与数据库的交互</p><p>缺点：代码量增加一层</p><h2 id="Swing图形用户界面"><a href="#Swing图形用户界面" class="headerlink" title="Swing图形用户界面"></a>Swing图形用户界面</h2><h3 id="Swing框架"><a href="#Swing框架" class="headerlink" title="Swing框架"></a>Swing框架</h3><p>Swing GUI包含了两种元素：组件和容器。</p><ul><li>组件是单独的控制元素，如按钮、文本框，组件要放到容器中才能显示。</li><li>容器也是组件，因此容器也可以放到别的容器当中。</li><li>组件和容器构成了包含层级关系。</li></ul><p><img src="/image/oop/1654523443952.png" alt="1654523443952.png"></p><p>Swing的组件是JComponent类的子类。</p><p>容器是一种可以包含组件的特殊组件。Swing当中有两大类容器：</p><ul><li>重量级容器，aka 顶层容器，不继承于JComponent，包括了JFrame, Japplet, JDialog。他们只能作为最顶层的容器包含其他组件。</li><li>轻量级容器，aka 中间层容器，继承于JComponent，包括JPanel, JScrollBar等。必须包含在其他容器当中。</li></ul><p>布局管理器控制着容器当中组件的位置。</p><p><img src="/image/oop/1654523928897.png" alt="1654523928897.png"></p><p>所有的Swing组件由EventQueue.invokeLater(()-&gt;{statements})激活。</p><p>事件：调用方法addActionListener(ActionListener)，也可以使用lambda语法：addActionListener(event-&gt;{statements})</p><p>密码域：char[] getPassword() 不是以String返回</p><h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><p>构成：</p><ul><li>模型model：存储内容</li><li>视图view：显示内容</li><li>控制器controller：处理用户输入</li></ul><p>模型：</p><ul><li>存储完整的内容</li><li>实现改变内容和查找内容的方法</li><li>没有用户界面，是完全不可见的</li></ul><p>视图：</p><ul><li>一个模型可以有多个视图</li><li>每个视图可以显示 全部内容的不同部分</li><li>模型更新时，需要所有视图同步更新</li></ul><p>控制器：</p><ul><li>使视图与模型分享</li><li>处理事件</li><li>将事件转化成对模型或者视图的更改</li></ul><p><img src="/image/oop/1654585747280.png" alt="1654585747280.png"></p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p>进程：正在运行的程序的实例</p><ul><li>私有空间，彼此隔离</li><li>多进程不共享内存</li><li>进程之间通过消息传递进行协作</li><li>一般来说，进程 &#x3D; 程序 &#x3D; 应用，但是一个应用也可能会有多个进程</li></ul><p>线程：进程当中一个单一顺序的控制流</p><ul><li>操作系统 能够进行运算调度的最小单位</li><li>包含在进程当中，是进程的实际运作单位</li><li>一个进程可以并发多个线程</li><li>一个进程至少包含一个线程</li><li>多个线程之间共享内存</li></ul><h3 id="Java中对线程的控制"><a href="#Java中对线程的控制" class="headerlink" title="Java中对线程的控制"></a>Java中对线程的控制</h3><p>线程的状态：</p><ul><li>新建 new</li><li>可运行 runnable</li><li>阻塞 block</li><li>等待 waiting</li><li>计时等待 timed waiting</li><li>终止 terminated</li></ul><p>创建线程的方法：</p><ul><li>继承Thread类，并重写run()方法</li><li>实现Runnable接口，重写run()方法<br>然后调用start()方法。<br>不能直接调用run方法，只会执行同个线程当中的run方法，不会启动新的线程</li></ul><p>Runnable更加常用，优势在于：</p><ul><li>任务与运行机制解耦，降低开销</li><li>更容易实现多线程资源共享</li><li>避免由于单继承局限所带来的影响</li></ul><p>如果引入 lambda语法，还可以进一步简写为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token function">sout</span><span class="token punctuation">(</span><span class="token string">"Hi."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>终止线程：线程可能由于以下两个原因之一而终止：</p><ol><li>run方法正常退出，线程自然终止</li><li>一个没有捕获的异常终止了run方法，使线程意外终止</li></ol><p>线程阻塞：</p><ul><li>进入：当线程A试图获取一个内部的对象锁，而此锁被其他线程持有</li><li>解除：当其他线程释放该锁，且线程高度器允许本线程持有它</li></ul><p>线程等待：</p><ul><li>进入：当前线程对象调用了Object.wait方法；或者其他线程调用了Thread.join方法</li><li>解除：等待的线程被其他线程对象唤醒；或者调用join的线程结束</li></ul><p>线程计时等待：</p><ul><li>进入：当前线程对象调用Object.wait(time) &#x2F; 当前线程调用Thread.sleep(time) &#x2F; 其他线程调用Thread.join(time)</li><li>解除：在指定的时间结束后自动返回</li></ul><p>中断线程：阻塞调用（sleep or wait) 将会被InterruptedException异常中断</p><p>进程优先级：</p><ul><li>默认地，一个线程继承它的父线程的优先级</li><li>可以用setPriority(int newPriority) （1~10，default 5)</li></ul><p>守护线程：</p><ul><li>使用setDaemon(true); 标识该线程为守护线程</li><li>守护线程的唯一用途是保证其能够为其他线程提供服务</li><li>结束：在run结束或者main函数结束后</li></ul><p><img src="/image/oop/1654530062149.png" alt="1654530062149.png"></p><h3 id="同步与死锁"><a href="#同步与死锁" class="headerlink" title="同步与死锁"></a>同步与死锁</h3><p>使用synchronized关键字对代码加锁。synchronized关键字上锁的的代码只能由获取锁的线程执行。</p><p>死锁：两个线程互相持有两把锁，互不退让，永远地等待下去</p><p>避免：线程获取锁的顺序要一致</p><h3 id="生产者-消费者设计模式"><a href="#生产者-消费者设计模式" class="headerlink" title="生产者-消费者设计模式"></a>生产者-消费者设计模式</h3><p>要点是设计缓冲区Buffer</p><p>当buffer满时，wait住。当buffer没满时则notifyAll()。注意上锁，使得它只能被一个线程访问。</p><p>问题：</p><ol><li>为什么缓冲区的判断条件是while(condition)不是if(condition)</li><li>java中要求wait()方法为什么出现在同步块当中</li></ol><p>答案：</p><ol><li>防止线程被错误唤醒</li><li>防止出现Lost Wake-Up。</li></ol><p>好处：</p><ul><li>并发：生产者和消费者各司其职，通过异步的方式支持高并发，将一个耗时的流程搞成生产和消费两个阶段</li><li>解耦：生产者和消费者解耦，通过缓冲区通讯。</li></ul><h3 id="任务与线程池"><a href="#任务与线程池" class="headerlink" title="任务与线程池"></a>任务与线程池</h3><p>感觉不是重点，不想写了。</p><h2 id="泛型与反射"><a href="#泛型与反射" class="headerlink" title="泛型与反射"></a>泛型与反射</h2><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>什么是泛型：引入参数类型的一种方法</p><p>泛型方法：</p><ul><li>可以定义在普通类当中，也可以定义在泛型类中。注意，只有声明泛型的方法才是泛型方法</li><li>在泛型类当中使用对应的泛型方法，其传入的参数必须与泛型类声明的类型一致</li><li>如果泛型方法的泛型与泛型类声明的泛型名称一致，泛型方法的泛型优先生效</li><li>类的静态泛型方法，不得使用泛型类当中的泛型，可以重新独立声明。</li></ul><p>泛型通配符：</p><ul><li>&lt; ? extends *ClassName* &gt; ：CN的子类</li><li>&lt; ? super *ClassName* &gt; ：超类</li><li>&lt; ? &gt; 无限定通配符</li><li>T表示一个确定的类型</li><li>？表示不确定的类型，不能用于定义类和泛型方法</li></ul><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>构成：</p><ul><li>一个抽象的模板，给出顶层逻辑的的骨架，作为模板方法</li><li>具体的实现：实现当中定义的抽象方法</li></ul><p><img src="/image/oop/1654583944451.png" alt="1654583944451.png"></p><p>优点：</p><ul><li>去除子类的重复代码</li><li>提高了复用性</li><li>可扩展</li></ul><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>通过对象获取类，再对类进行操作，如新建一个新的实例对象或者修改已有的实例。</p><p>获取类对象：</p><ul><li>getClass()</li><li>forName(className)</li><li>.class</li></ul><p>构造类的实例：</p><ul><li>使用Class.newInstance()，注意这个是无参数的，并且如果没有默认的构造函数，会抛出异常</li><li>使用Constructor的newInstance()，先用Class.getConstructor(Class paraTypes)，得到cons。普通的getCon只能得到公有的构造方法。如果是private&#x2F;default&#x2F;protected 需要使用getDeclaredCons</li><li>使用Constructor还要先setAccessible</li></ul><p>获取和修改成员变量</p><ul><li>使用Class.getField(name)方法获取名称为name的变量</li><li>Field类当中的get和set方法可以查看或者修改值</li></ul><p>获取成员方法：</p><ul><li>Class.getMethod(String name, Class  paraTypes)可以获取 一个指定名称与参数类型的成员方法</li><li>使用Method.invoke(object, paras)来调用方法</li></ul><p>优缺点：</p><ul><li>优点：比较灵活，可以在运行时动态获取类的实例</li><li>缺点：性能慢，破坏了封装性</li></ul><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h3><p>两种常见的网络协议支持，by java.net</p><ul><li><strong>TCP</strong> ：TCP（英语：Transmission Control Protocol，传输控制协议） 是一种面向连接的、可靠的、基于字节流的传输层通信协议，<strong>TCP 层是位于 IP 层之上，应用层之下的中间层</strong>。TCP 保障了两个应用程序之间的可靠通信。通常用于互联网协议，被称 TCP &#x2F; IP。</li><li><strong>UDP</strong> ：UDP （英语：User Datagram Protocol，用户数据报协议），<strong>位于 OSI 模型的传输层</strong>。一个无连接的协议。提供了应用程序之间要发送数据的数据报。由于UDP缺乏可靠性且属于无连接协议，所以应用程序通常必须容许一些丢失、错误或重复的数据包。</li></ul><p>URL与Socket通信的区别：</p><ul><li>Socket通信在服务器端运行通信程序，不停地监听客户端的连接请求，主动等待客户端的请求服务，客户端提出请求时，马上连接并通信。而url进行通信时，被动等待客户端的请求。</li><li>Socket通信方式是服务器端可以与多个客户端相互通信，而url只对一个客户通信。</li></ul><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>构成：</p><ul><li>抽象目标（发布者）notify</li><li>具体目标</li><li>抽象观察者 update</li><li>具体观察者</li></ul><p><img src="/image/oop/1654589238658.png" alt="1654589238658.png"></p><p>优点：</p><ul><li>可以实现表示层与数据逻辑层的分离</li><li>在sus-er和pub-er建立了一个抽象的耦合</li><li>支持广播通信，简化了一对多系统的设计难度</li><li>符合开闭原则</li></ul><p>缺点：</p><ul><li>花费时间多</li><li>存在循环依赖时会使系统崩溃</li><li>只知道变化，不知道怎么发生变化</li></ul>]]></content>
    
    
    <categories>
      
      <category>courses</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>programming</tag>
      
      <tag>oop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/03/hello-world/"/>
    <url>/2023/02/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>编译原理</title>
    <link href="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <url>/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>考试说明：</p><p>chapter 7.7-7.9、chapter 8、chapter 9.5的display表部分、chapter 9.6、chapter 10、chapter 11.3-11.5均不考，其他部分都有机会考，特别是标注了重点难点的部分。</p><p>考试题型就是选择、判断、填空、简答、分析计算等等</p><h2 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h2><h3 id="程序设计语言"><a href="#程序设计语言" class="headerlink" title="程序设计语言"></a>程序设计语言</h3><ul><li>机器语言：0、1代码构成</li><li>汇编语言：助记符</li></ul><blockquote><p>上二者更接近计算机硬件指令系统的工作</p></blockquote><ul><li>高级语言：在表示方法上更接近待解问题的表示方法<ul><li>如定义数据、描述运算、控制流程、传输数据</li><li>C、Fortran, Pascal, Java, SQL，etc。</li></ul></li><li>命令语言：控制系统的工作——以功能封装为特征<ul><li>如UNIX上的shell</li></ul></li></ul><p>练习：</p><ul><li>高级语言和汇编语言有什么差别？</li><li>命令语言是什么，举一个例子？</li><li>命令语言是高级语言的一种吗？</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>强制式（命令式）语言<ul><li>通过执行运算命令以及运算次序来描述计算过程的语言</li><li>如：Fortran, Pascal, C…</li><li>层次性和抽象性不高，面向过程</li></ul></li><li>申述式语言：<ul><li>着重描述要处理什么，而非如何处理，非命令式语言</li><li>函数式语言</li><li>逻辑式语言</li><li>并发式语言</li><li>不是重点</li></ul></li><li>面向对象语言<ul><li>以对象为核心，比如Smalltalk, Ada(程序包)，C++, Java, Python</li><li>具有封装性【识认性（对象），类别性（类）】、多态性和继承性</li></ul></li></ul><h3 id="程序设计语言的翻译"><a href="#程序设计语言的翻译" class="headerlink" title="程序设计语言的翻译"></a>程序设计语言的翻译</h3><ul><li>翻译程序（Translator）<br>将源程序翻译为等价的目标程序</li><li>解释程序（Interpreter）<br>一边解释一边执行的翻译程序<br>以上的区别就是笔译translator与口译interpreter。</li><li>编译程序（Compiler）<br>将源程序完整转换成机器语言&#x2F;汇编语言程序</li></ul><p>编译系统 &#x3D; 编译程序 + 运行系统</p><h3 id="编译程序总体结构（重点）"><a href="#编译程序总体结构（重点）" class="headerlink" title="编译程序总体结构（重点）"></a>编译程序总体结构（重点）</h3><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668672396466.png" class="" width="1668672396466"><p>每个模块的功能：（回忆一下实验课干了啥）</p><ol><li>词法分析器：从左到右扫描源程序的字符串，生成单词符号串（Token）。并且将发现的标识符identifier登记到符号表中。检查组词方面的错误并处理。</li><li>语法分析器：组词成句，识别出语法成分，分层给出程序的组成结构，指出语法错误，制导语义翻译。</li><li>语义分析与中间代码生成器：语法分析器识别出语法成分之后，3完成对其的语义分析。并以中间代码的形式实现对分析结果的表示。</li><li>代码优化器：对中间代码进行优化处理，一是节省存储空间，更有效利用机器资源；二是节省时间，使程序运行速度更快，效率更高。</li><li>目标代码生成器：将中间代码转化为目标机器上的机器指令代码或者汇编代码。</li><li>表格管理：按照编译过程当中的信息需求，以不同类型组织符号表，进行增查的维护表格操作，提供信息服务，辅助实现编译任务。</li><li>出错处理器：对各种错误进行检查、报告、纠正，以及相应的续编译处理。</li></ol><p>练习：</p><ul><li>词法分析有检查错误的功能吗？</li><li>目标代码生成器只能生成机器指令吗？</li><li>符号表格管理需要删&#x2F;改吗？</li><li>出错处理器只能处理错误吗？</li></ul><h4 id="编译程序的组织"><a href="#编译程序的组织" class="headerlink" title="编译程序的组织"></a>编译程序的组织</h4><p>需要多遍扫描，在每次扫描中完成不同的任务</p><ul><li>如：1st构造语法树，2nd处理中间表示，增加信息etc。</li></ul><p>为了提高可移植性，编译程序可以分成前端、后端：</p><ul><li>前端：与源语言有关，与目标机无关的部分<ul><li>词法分析、语法分析、语义分析与中代生成、与机器无关的代码优化</li></ul></li><li>后端：与目标机有关的部分<ul><li>与机器有关的代码优化、目标代码生成</li></ul></li></ul><h4 id="编译程序的生成（重点）"><a href="#编译程序的生成（重点）" class="headerlink" title="编译程序的生成（重点）"></a>编译程序的生成（重点）</h4><p>T形图：</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668673982134.png" class="" width="1668673982134"><p>T形图拼接的性质：</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668675508219.png" class="" width="1668675508219"><p>要求拼接处（蓝色框）相同。</p><p>T形图翻译生成：</p><ul><li>在一个机器上实验C语言编译器：C语言–&gt;机器语言，via机器语言。</li><li>你可以以C语言为实现语言，任意地生成T形图。</li></ul><p>练习：在在</p><h2 id="高级语言与方法"><a href="#高级语言与方法" class="headerlink" title="高级语言与方法"></a>高级语言与方法</h2><h3 id="语言结构"><a href="#语言结构" class="headerlink" title="语言结构"></a>语言结构</h3><p>语言是由字和组合规则构成的统一体。</p><p>对于程序设计语言来说，</p><ul><li>程序设计语言：组成程序的所有语句的集合</li><li>程序：满足语法规则的语句序列</li><li>语句：满足语法规则的单词序列</li><li>单词：满足词法规则的字符串</li></ul><p>语言的描述形式——文法：</p><ul><li>语法——语句</li><li>词法——单词</li></ul><p>研究语言的角度：</p><ul><li>Chomsky从产生语言的角度</li><li>Kleene从识别语言的角度（自动机）</li><li>Chomsky证明了文法与自动机的等价性</li></ul><h3 id="描述语言的基本定义"><a href="#描述语言的基本定义" class="headerlink" title="描述语言的基本定义"></a>描述语言的基本定义</h3><p>字母表 $\Sigma$：非空有穷的集合，其中的元素称为字母，或者字符。</p><p>字母表的正闭包$\Sigma^+$：字母表内所有字母的任意组合。</p><p>字母表的克林闭包$\Sigma^*&#x3D;\Sigma^+\cup\varepsilon$。即多加了一个空字符。</p><p>前缀：句子的前部分，包括空和本身</p><p>真前缀：不包括本身</p><p>后缀：句子的后部分，包括空和本身</p><p>真后缀：不包括本身</p><p>语言：克林闭包的一个子集（某些句子的组合）</p><p>句子：语言的一个元素</p><h3 id="文法的定义"><a href="#文法的定义" class="headerlink" title="文法的定义"></a>文法的定义</h3><p>方法G是一个四元组:</p><p>$$<br>G &#x3D; (V, T, P, S)<br>$$</p><p>其中，</p><ul><li>V是非终结符集，表示语法变量&#x2F;成分——某个语言的各种子结构，以大写字母表示。</li><li>T是终结符集，表示语言的句子中出现的字符，以小写字母表示。$V\cap T&#x3D;\emptyset$</li><li>S是开始符号，至少在产生式左侧出现一次。$S\in V$</li><li>P是产生式集合，产生式定义各个语法成分的结构&#x2F;组成规则，如$A\rightarrow bB$</li></ul><p>产生式可以简写，</p><p>$$<br>\alpha\rightarrow\beta_1, \alpha\rightarrow\beta_n \implies a\to\beta_1|\beta_n<br>$$</p><p>其中，$\beta_1, \beta_n$叫做候选式，Candidate。</p><h3 id="句子的派生-x2F-推导（产生语言）"><a href="#句子的派生-x2F-推导（产生语言）" class="headerlink" title="句子的派生&#x2F;推导（产生语言）"></a>句子的派生&#x2F;推导（产生语言）</h3><p>简单来说，句子的推导就是从一个起始的产生式，依据产生式的规则，逐步变成一个具体的句子的过程。</p><p>例如：</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668757281154.png" class="" width="1668757281154"><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668758064382.png" class="" width="1668758064382"><p>左句型对应最左推导，每次对最左边的变量下刀。右变量同理。普通的句型则是随机动手。</p><p>可以看到，左句型、右句型是唯一的，但是普通句型可以有多个过程。</p><h3 id="句子的识别-x2F-归约（识别语言）"><a href="#句子的识别-x2F-归约（识别语言）" class="headerlink" title="句子的识别&#x2F;归约（识别语言）"></a>句子的识别&#x2F;归约（识别语言）</h3><p>是推导的逆过程，由一个具体的句子回溯到一个原始的产生式。</p><p>最右归约表示从具体句子的最右下手，最左同理。</p><p>可以看到，最右归约和最左推导的过程是一样的。</p><h3 id="CFG的语法树"><a href="#CFG的语法树" class="headerlink" title="CFG的语法树"></a>CFG的语法树</h3><p>上下文无关方法：箭头左侧只有一个变量且不产生空。</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668758725467.png" class="" width="1668758725467"><p>CFG下的句子可以写成一颗语法树。</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668758824122.png" class="" width="1668758824122"><h3 id="短语、直接短语、句柄"><a href="#短语、直接短语、句柄" class="headerlink" title="短语、直接短语、句柄"></a>短语、直接短语、句柄</h3><p>参考上面的语法树，</p><ul><li><p>短语：对于一棵子树，其所有叶子结点从左到右排列，有几个子树就有几个短语。如id+id*id, id</p></li><li><p>直接短语：考虑所有叶子结点，如果这个叶子他的直系兄弟都是叶子（他没有侄子），那就是直接短语。下图中，b1, b2, a2是直接短语，但是a3不是，他有一个侄子a2。</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668759680637.png" class="" width="1668759680637"></li><li><p>句柄：最左直接短语。在上图中是b1。</p></li></ul><p>这ppt讲的真的跟shit一样。</p><p>练习：</p><ul><li>上下文有关文法可以用语法树表示吗？</li><li>上下文有关文法有短语吗？</li></ul><h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><p>这章比较抽象，考的比较少。</p><h3 id="词法分析器的功能"><a href="#词法分析器的功能" class="headerlink" title="词法分析器的功能"></a>词法分析器的功能</h3><p>功能：输入源程序，输出单词符号(token)。即：把构成源程序的字符串转换成“等价的”单词(记号)序列。</p><p>单词被表示成（种别，属性值）的二元组的形式。</p><p>为了提高效率，词法分析器采用了缓冲技术，当字符流读入缓冲区时，是经过剔除注释、空白符等预处理之后的结果。</p><p>词法分析阶段的错误处理：</p><p>1．非法字符检查</p><p>2．关键字拼写错误检查</p><p>3．不封闭错误检查</p><p>4．重复说明检查</p><p>5．错误恢复与续编译</p><p>紧急方式恢复：反复删掉剩余输入最前面的字符，直到词法分析器能发现一个正确的单词为止。</p><h3 id="单词的描述与正则文法（重点）"><a href="#单词的描述与正则文法（重点）" class="headerlink" title="单词的描述与正则文法（重点）"></a>单词的描述与正则文法（重点）</h3><p>单词的识别本质上是正则语言的识别。（自动机！）</p><p>正则表达式：</p><ul><li>| 表示或</li><li>* 表示Kleene闭包</li><li>+ 表示正闭包</li><li>? 表示0个或1个</li><li>ab 并列表示两者的连接</li></ul><p>根据正则文法构造正则表达式：</p><ol><li>构造方程式<ul><li>形如$A\to a_1|a_2|…|a_mB$, 写成$A&#x3D;(a_1|a_2|…|a_m)B$, where $B\ne A$.</li><li>For $A\to a_1|a_2|…|a_mA$, convert it as $A&#x3D;(a_1|a_2|…|a_m)*A$.</li></ul></li><li>解联立方程组，求等价的正则表达式 r<ul><li>用代入消元法</li><li>以带*的等式为轴操作</li><li>从末往前消<img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668765702504.png" class="" width="1668765702504"></li></ul></li></ol><p>根据正则表达式构造正则文法：</p><p>从 $A\to r$ 开始，逐步进行分解：</p><ol><li>if $r&#x3D;r_1r_2$, then $A\to r_1B, B\to r_2$</li><li>if $r&#x3D;r_1^*r_2$, then $A\to r_1A, A\to r_2$</li><li>if $r&#x3D;r_1|r_2$, then $A\to r_1|r_2$</li></ol><h3 id="自动机"><a href="#自动机" class="headerlink" title="自动机"></a>自动机</h3><p>主要是《形式语言与自动机》课程的内容，感觉不是重点，懒的复习这个了。</p><p>还有一个Lex，赌他也不考这个。</p><h2 id="自顶向下语法分析"><a href="#自顶向下语法分析" class="headerlink" title="自顶向下语法分析"></a>自顶向下语法分析</h2><h3 id="文法改造"><a href="#文法改造" class="headerlink" title="文法改造"></a>文法改造</h3><p>自顶向下分析会遇到二义性问题、回溯问题、左递归引起的无穷推导问题，需对文法进行改造：消除二义性、消除左递归、提取公共左因子。</p><ul><li>消除左递归：即改造$A\to A\alpha|\beta$：翻转、拼接<br>$$<br>\implies A’\to\alpha A’, \quad A\to\beta A’|\varepsilon<br>$$</li><li>提取左因子：<br>$$<br>A\to\alpha\beta_1|\alpha\beta_2 \implies A\to\alpha A’,\quad A’\to \beta_1|\beta_2<br>$$</li></ul><h3 id="FIRST集和FOLLOW集"><a href="#FIRST集和FOLLOW集" class="headerlink" title="FIRST集和FOLLOW集"></a>FIRST集和FOLLOW集</h3><ol><li>求FIRST集：FIRST(x)本v质上是在问，x可能以哪些字母开头？<ul><li>若x是终结符，FIRST(x)&#x3D;{x} &#x2F;&#x2F; 显然此时x只能以x开头</li><li>若X是非终结符：<ul><li>$X\to aA \implies a\in FIRST(X)$ &#x2F;&#x2F; 此时X可能以a开头</li><li>$X\to \varepsilon \implies \varepsilon\in FIRST(X)$ &#x2F;&#x2F; 也可以以e开头</li><li>$X\to Y_1Y_2…Y_k$：<br>+ 把$FIRST(Y_1)-\varepsilon$加入到$FIRST(X)$<br>+ 如果$\varepsilon\in FIRST(Y_1)$, 则考虑$Y_2$，往下类推<br>+ 只有空属于每个Y的时候，才可能加入到FIRST(X)。</li></ul></li></ul></li><li>求FOLLOW集：FOLLOW(x)本质上是在问，x后面可能跟哪些字母？<ul><li>对于开始符S，$# \in FOLLOW(S)$</li><li>考虑 $B\to\alpha A\beta$：<ul><li>将$FIRST(\beta)-\varepsilon$加入到$FOLLOW(A)$</li><li>若空还在$FIRST(\beta)$中，将FOLLOW(B)也加到FOLLOW(A)。 &#x2F;&#x2F; $B\to\alpha A$变换之后，A后面跟的字母就是先前B后面跟的字母。</li></ul></li></ul></li></ol><h3 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h3><p>判断LL(1)文法：</p><ol><li>已经化简并且没有左递归</li><li>对于A每个产生式的candidates, 要求满足：<ul><li>$FIRST(c_i)\cap FIRST(c_j) &#x3D; \emptyset$</li><li>若存在candidates为$\varepsilon$, 则其他的$FIRST(c_i)\cap FOLLOW(A)&#x3D;\emptyset$</li></ul></li></ol><p>构造LL(1)分析表：哪些产生式可以让A以a开头？</p><p>对于$A\to r_i$</p><ol><li>如果$FIRST(r_i)&#x3D;a$, 则M[A, a]中填入此产生式</li><li>如果$FIRST(r_i)&#x3D;\varepsilon$，则考虑FOLLOW(A)&#x3D;b，在M[A, b]中填入此产生式</li><li>其他空着。</li></ol><p>反正就是，出现FIRST(B)&#x3D;e的时候，就要考虑FOLLOW(A)代替他。</p><h2 id="自底向上语法分析"><a href="#自底向上语法分析" class="headerlink" title="自底向上语法分析"></a>自底向上语法分析</h2><p>解决LR分析：LR(0) &lt; SLR(1) &lt; LALR(1) &lt; LR(1)</p><h3 id="项目与DFA"><a href="#项目与DFA" class="headerlink" title="项目与DFA"></a>项目与DFA</h3><p>项目：右部某位置上有·的产生式</p><ul><li>如A–&gt;xyz有四个项目：A–&gt;·xyz、A–&gt;x·yz、A–&gt;xy·z、A–&gt;xyz·</li></ul><p>项目的分类：</p><ol><li>归约项目：$A\to \alpha\cdot$</li><li>接受项目：$S\to \alpha\cdot$</li><li>移进项目：$A\to\alpha \cdot z\beta$</li><li>待约项目：$A\to \alpha\cdot Z\beta$</li></ol><p>画项目集活前缀的DFA：</p><ol><li>作拓广文法：新增：(0) S’–&gt;S，然后把其他的规则一一标号。</li><li>$I_0$中的第一个项目为S’–&gt;·S，接下来，在$I_0$中寻找等价项目。<ul><li>A–&gt;XYZ·BCD的等价项目为$B\to\cdot\beta$。也就是把·后面的非终结符展开。</li></ul></li><li>寻找到完整的$I_0$之后，·可以跨越不同的终结符或者非终结符，形成不同的分支，对应不同的新项目集。</li><li>在新的项目集内继续寻找等价项目，得到完整的新项目集。</li><li>重复3.4.，直到归约。</li><li>每个项目集对应DFA的一个状态，最终形成了一个DFA。</li></ol><p>例子如下图：（先别管#）</p><p>$$<br>(S\to A,\quad A\to BA|\varepsilon,\quad B\to aB|b)<br>$$</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668783085916.png" class="" width="1668783085916"><h3 id="LR分析表"><a href="#LR分析表" class="headerlink" title="LR分析表"></a>LR分析表</h3><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668786465124.png" class="" width="1668786465124"><p>LR分析表表示状态的转移。需要在表格中填入对应的内容。</p><h3 id="LR-0-文法"><a href="#LR-0-文法" class="headerlink" title="LR(0)文法"></a>LR(0)文法</h3><p>画出DFA之后，项目集内没有冲突项目：</p><ul><li>移进-归约冲突</li><li>归约-归约冲突</li></ul><p>这样的文法称之为LR(0)文法。</p><p>对于LR(0)文法分析表，</p><ul><li>ACTION:<ul><li>sn: 遇到此终结符，shift到n状态。</li><li>rn: 此状态n为归约项目，此行都填rn</li><li>acc：接受项目，#处填acc</li></ul></li><li>GOTO:<ul><li>填n，经过此非终结符到达状态n</li></ul></li></ul><h3 id="SLR-1-文法"><a href="#SLR-1-文法" class="headerlink" title="SLR(1)文法"></a>SLR(1)文法</h3><p>满足以下条件：</p><ol><li>画出DFA中，项目集内存在冲突项目。</li><li>对于$I_n&#x3D;{A_i\to\cdot a_i\beta,\quad B_i&#x3D;\alpha\cdot}$，（同时有移进和归约），要求${a_1,…,a_m}, FOLLOW(B_1)…FOLLOW(B_n)$两两不相交。也就是·之后的字母只能出现在一个集合内。</li></ol><p>对于SLR(1)文法分析表，</p><ul><li>ACTION：对于归约项目$A\to\alpha$，求FOLLOW(A)得到的结果处填上rn，即遇到FOLLOW(A)的时候归约</li><li>其他和LR(0)一样</li></ul><h3 id="LALR-1-文法"><a href="#LALR-1-文法" class="headerlink" title="LALR(1)文法"></a>LALR(1)文法</h3><p>两个项目集，如果就向前搜索符不同，其他都相同。则为同心集。</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668846689364.png" class="" width="1668846689364"><h3 id="LR-1-文法"><a href="#LR-1-文法" class="headerlink" title="LR(1)文法"></a>LR(1)文法</h3><p>判断：构造带有向前搜索符的DFA，没有归约-归约冲突。</p><p>DFA构造：</p><ul><li>起始项目：S’-&gt;·S, #</li><li>对于$A\to \alpha\cdot B\beta,a$, 其等价项目$B&#x3D;\cdot r, b$，其中，$b&#x3D;FIRST(\beta a)$</li></ul><p>对于LR(1)分析表：</p><ul><li>ACTION: 归约项目填写到向前搜索符的地方，填上rn</li><li>其他和LR(0)一样。</li></ul><h3 id="自底向上语法分析过程"><a href="#自底向上语法分析过程" class="headerlink" title="自底向上语法分析过程"></a>自底向上语法分析过程</h3><p>看看这个表</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668790515843.png" class="" width="1668790515843"><ol><li>在step 1, 由初始状态栈和下一字母，可以查得此时的action为s4。对于sn，其goto项就是n。把goto项压入状态栈，然后把字母压入符号栈。</li><li>step 2同理。到达step 3后，此时查表得到action为r5。r5对应的规约是B-&gt;b，由于右边长度为1，状态栈弹出1个元素。此时栈顶为4，查询GOTO[4, B] &#x3D; 7，压入状态栈。修改符号栈。</li><li>step 4同理。查询到action为r4，对应规约为B-&gt;aB，由于右边长度为2，状态栈弹出2个元素，此时栈顶为0，查询GOTO[0, B] &#x3D; 3，压入状态栈，修改符号栈。</li></ol><h2 id="语法制导翻译与属性文法"><a href="#语法制导翻译与属性文法" class="headerlink" title="语法制导翻译与属性文法"></a>语法制导翻译与属性文法</h2><p>这ppt写的是真nm抽象。</p><p>语义翻译：语义分析+中间代码生成</p><p>如果在语义分析的同时进行语义翻译，这个就called语法制导翻译。</p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>表示语义信息：</p><ul><li>为CFG中的文法符号设计语义属性，如类型、值、地址</li></ul><p>计算语义属性：</p><ul><li>通过文法符号所在的产生式，其相关联的语义规则来计算。</li></ul><p>如何联系语义规则与语法规则？</p><ul><li>语法制导定义：语法规则与语义规则（计算式）之间的映射</li><li>语法制导翻译方案：SDD的补充，显式地指明了语义规则的计算顺序</li></ul><h3 id="语法制导定义SDD"><a href="#语法制导定义SDD" class="headerlink" title="语法制导定义SDD"></a>语法制导定义SDD</h3><ul><li>将每个文法符号与其语义属性集合相关联</li><li>将产生式与语义规则相关联</li></ul><p>例如：</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668794092089.png" class="" width="1668794092089"><p>文法符号的属性：</p><ul><li>综合属性：<ul><li>在语法树结点N上，A的综合属性只能由N和N的子结点定义。如<img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668793812787.png" class="" width="1668793812787"></li><li>对于终结符a，其综合属性是由词法分析器提供的词法值。（所以，为什么token需要二元组？）</li></ul></li><li>继承属性<ul><li>在语法分析树结点N上，A的继承属性只能由N的父结点、兄弟结点、N本身定义。如：（兄弟）<img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668794024554.png" class="" width="1668794024554"></li><li>终结符没有继承属性。</li></ul></li></ul><p>副作用：过程调用的形式表达的语义规则</p><p>注释分析树：每个节点都带有属性值</p><p>属性文法：一个没有副作用的SDD</p><h4 id="SDD的求值顺序"><a href="#SDD的求值顺序" class="headerlink" title="SDD的求值顺序"></a>SDD的求值顺序</h4><p>在语法树中，把综合属性写在右边，继承属性写在左边。</p><p>如果一个属性A的求出，需要依赖B，那么画一条B-&gt;A的有向边。</p><p>完成所有边后，会得到一个有向图，把它变成拓扑排序，就是SDD的求值顺序。</p><p>注意：</p><ul><li>如果只有综合属性的SDD，一定可以求出一个顺序</li><li>如果同时有syn和inh，有可能没有这个顺序（有可能形成环）。</li></ul><h4 id="S-属性定义（S-SDD）"><a href="#S-属性定义（S-SDD）" class="headerlink" title="S-属性定义（S-SDD）"></a>S-属性定义（S-SDD）</h4><p>只使用综合属性的SDD。可以通过<strong>自底向上</strong>的方法，得到所有的节点的属性值。</p><h4 id="L-属性定义（L-SDD）"><a href="#L-属性定义（L-SDD）" class="headerlink" title="L-属性定义（L-SDD）"></a>L-属性定义（L-SDD）</h4><p>在一个产生式所关联的各个属性之间，有向图的边可以从左到右，不能从右到左。</p><p>正式定义：好抽象。<br>反正就是，限制了继承属性，不能依赖右边的兄弟的属性</p><p>S-SDD是L-SDD的一种。</p><h3 id="语法制导翻译方案SDT"><a href="#语法制导翻译方案SDT" class="headerlink" title="语法制导翻译方案SDT"></a>语法制导翻译方案SDT</h3><p>不想看这个了，赌不会考。</p><p>SDT是产生式右部嵌入了语义动作（程序片段）的CFG</p><p>SDT可以看成是SDD的具体实施方案</p><p>例如：</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668803533687.png" class="" width="1668803533687"><p>S-SDD生成SDT：把语义动作加到产生式最右就可以。</p><p>L-SDD生成SDT：</p><ul><li>把计算A的继承属性的动作插入到产生式右部A出现之前的位置</li><li>把计算左部的综合属性的动作插入到最右端。</li></ul><h2 id="语义分析与中间代码生成"><a href="#语义分析与中间代码生成" class="headerlink" title="语义分析与中间代码生成"></a>语义分析与中间代码生成</h2><p>逆波兰表示：ab+，是树的后序遍历。</p><p>三地址码：每条指令最多有两个地址，即两个操作数和一个结果。</p><ul><li>如x+y*z的三地址码：t1:&#x3D;y*z, t2:&#x3D;x+t1</li><li>三地址码中还可以使用if, goto之类的</li><li>其实就是规则更简单的伪代码</li></ul><p>四元式：(op, arg1, arg2, result) –&gt; result &#x3D; arg1 op arg2</p><ul><li>如(*, y, z, t1), (+, x, t1, t2)</li></ul><h3 id="翻译为四元式序列"><a href="#翻译为四元式序列" class="headerlink" title="翻译为四元式序列"></a>翻译为四元式序列</h3><p>基本语句的转换：</p><ul><li>x :&#x3D; y | (:&#x3D;, y, -, x)</li><li>t1 &#x3D; x+y | (+, x, y, t1)</li><li>if A goto p | (jnz, A, -, p)</li><li>if A rop B, goto p | (jrop, A, B, p)</li><li>goto p | (j, -, -, p)</li></ul><h4 id="布尔表达式-gt-四元式序列"><a href="#布尔表达式-gt-四元式序列" class="headerlink" title="布尔表达式-&gt;四元式序列"></a>布尔表达式-&gt;四元式序列</h4><p>从左向右扫描布尔表达式。一旦确定如下的结果就结束：</p><ul><li>$A\land B$: A假则假</li><li>$A\lor B$: A真则真</li></ul><p>写的时候，A真A假的情况要成对相邻出现。</p><h4 id="if-x2F-while"><a href="#if-x2F-while" class="headerlink" title="if&#x2F;while"></a>if&#x2F;while</h4><p>其实差不多。</p><h2 id="存储分配"><a href="#存储分配" class="headerlink" title="存储分配"></a>存储分配</h2><h3 id="静态存储分配"><a href="#静态存储分配" class="headerlink" title="静态存储分配"></a>静态存储分配</h3><p>分配方法：</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668845734242.png" class="" width="1668845734242"><ol><li>顺序分配法<ul><li>依据调用的顺序关系，为每个过程分配相关的存储空间</li><li>我们注意到，同层的过程是没有互相调用的关系的，不可能同时处于活跃状态。这意味着我们可以使用更少的存储空间。</li></ul></li><li>层次分配法<ul><li>从最下层过程开始，按层次分配存储单元。</li><li>为过程分配时，一定要超过其调用过程的存储空间位置<img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668845962064.png" class="" width="1668845962064"></li></ul></li></ol><p>不想写这个啦我测剩下的感觉也没什么好考的再看看作业的那个结构体对齐吧。</p><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>考一个指令的开销。</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668846196074.png" class="" width="1668846196074"><p>只有R和*R是0开销。其他（如访问地址、使用常数）都是1。</p><p>另外，每一条指令都有1的基本开销。</p><img src="/2022/06/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1668846470831.png" class="" width="1668846470831">]]></content>
    
    
    <categories>
      
      <category>courses</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
